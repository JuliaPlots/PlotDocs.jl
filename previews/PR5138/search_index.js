var documenterSearchIndex = {"docs":
[{"location":"RecipesPipeline/#RecipesPipeline","page":"RecipesPipeline","title":"RecipesPipeline","text":"","category":"section"},{"location":"RecipesPipeline/#An-implementation-of-the-recipe-pipeline-from-Plots","page":"RecipesPipeline","title":"An implementation of the recipe pipeline from Plots","text":"","category":"section"},{"location":"RecipesPipeline/","page":"RecipesPipeline","title":"RecipesPipeline","text":"This package was factored out of Plots.jl to allow any other plotting package to use the recipe pipeline. In short, the extremely lightweight RecipesBase package can be depended on by any package to define \"recipes\": plot specifications of user-defined types, as well as custom plot types. RecipePipeline contains the machinery to translate these recipes to full specifications for a plot.","category":"page"},{"location":"generated/statsplots/#StatsPlots","page":"StatsPlots","title":"StatsPlots","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: Build Status) (Image: Documentation) (Image: project chat)","category":"page"},{"location":"generated/statsplots/#Original-author:-Thomas-Breloff-(@tbreloff),-maintained-by-the-JuliaPlots-members","page":"StatsPlots","title":"Original author: Thomas Breloff (@tbreloff), maintained by the JuliaPlots members","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"This package is a drop-in replacement for Plots.jl that contains many statistical recipes for concepts and types introduced in the JuliaStats organization.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Types:\nDataFrames\nDistributions\nRecipes:\nhistogram/histogram2d\ngroupedhist\nboxplot\ndotplot\nviolin\nmarginalhist\ncorrplot/cornerplot\nandrewsplot\nerrorline (ribbon, stick, plume)\nMDS plot\nqq-plot","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"It is thus slightly less lightweight, but has more functionality.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Initialize:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"#]add StatsPlots # install the package if it isn't installed\nusing StatsPlots # no need for `using Plots` as that is reexported here\ngr(size=(400,300))","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Table-like data structures, including DataFrames, IndexedTables, DataStreams, etc... (see here for an exhaustive list), are supported thanks to the macro @df which allows passing columns as symbols. Those columns can then be manipulated inside the plot call, like normal Arrays:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using DataFrames, IndexedTables\ndf = DataFrame(a = 1:10, b = 10 .* rand(10), c = 10 .* rand(10))\n@df df plot(:a, [:b :c], colour = [:red :blue])\n@df df scatter(:a, :b, markersize = 4 .* log.(:c .+ 0.1))\nt = table(1:10, rand(10), names = [:a, :b]) # IndexedTable\n@df t scatter(2 .* :b)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Inside a @df macro call, the cols utility function can be used to refer to a range of columns:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"@df df plot(:a, cols(2:3), colour = [:red :blue])","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"or to refer to a column whose symbol is represented by a variable:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"s = :b\n@df df plot(:a, cols(s))","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"cols() will refer to all columns of the data table.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"In case of ambiguity, symbols not referring to DataFrame columns must be escaped by ^():","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"df[:red] = rand(10)\n@df df plot(:a, [:b :c], colour = ^([:red :blue]))","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"The @df macro plays nicely with the new syntax of the Query.jl data manipulation package (v0.8 and above), in that a plot command can be added at the end of a query pipeline, without having to explicitly collect the outcome of the query first:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using Query, StatsPlots\ndf |>\n    @filter(_.a > 5) |>\n    @map({_.b, d = _.c-10}) |>\n    @df scatter(:b, :d)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"The @df syntax is also compatible with the Plots.jl grouping machinery:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using RDatasets\nschool = dataset(\"mlmRev\", \"Hsb82\")\n@df school density(:MAch, group = :Sx)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"To group by more than one column, use a tuple of symbols:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"@df school density(:MAch, group = (:Sx, :Sector), legend = :topleft)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: grouped)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"To name the legend entries with custom or automatic names (i.e. Sex = Male, Sector = Public) use the curly bracket syntax group = {Sex = :Sx, :Sector}. Entries with = get the custom name you give, whereas entries without = take the name of the column.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"The old syntax, passing the DataFrame as the first argument to the plot call is no longer supported.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"","category":"page"},{"location":"generated/statsplots/#Visualizing-a-table-interactively","page":"StatsPlots","title":"Visualizing a table interactively","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"A GUI based on the Interact package is available to create plots from a table interactively, using any of the recipes defined below. This small app can be deployed in a Jupyter lab / notebook, Juno plot pane, a Blink window or in the browser, see here for instructions.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using RDatasets\niris = dataset(\"datasets\", \"iris\")\nusing StatsPlots, Interact\nusing Blink\nw = Window()\nbody!(w, dataviewer(iris))","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: dataviewer)","category":"page"},{"location":"generated/statsplots/#marginalhist-with-DataFrames","page":"StatsPlots","title":"marginalhist with DataFrames","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using RDatasets\niris = dataset(\"datasets\",\"iris\")\n@df iris marginalhist(:PetalLength, :PetalWidth)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: marginalhist)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"","category":"page"},{"location":"generated/statsplots/#marginalscatter-with-DataFrames","page":"StatsPlots","title":"marginalscatter with DataFrames","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using RDatasets\niris = dataset(\"datasets\",\"iris\")\n@df iris marginalscatter(:PetalLength, :PetalWidth)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: marginalscatter)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"","category":"page"},{"location":"generated/statsplots/#marginalkde","page":"StatsPlots","title":"marginalkde","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"x = randn(1024)\ny = randn(1024)\nmarginalkde(x, x+y)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: correlated-marg)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"levels=N can be used to set the number of contour levels (default 10); levels are evenly-spaced in the cumulative probability mass.\nclip=((-xl, xh), (-yl, yh)) (default ((-3, 3), (-3, 3))) can be used to adjust the bounds of the plot.  Clip values are expressed as multiples of the [0.16-0.5] and [0.5,0.84] percentiles of the underlying 1D distributions (these would be 1-sigma ranges for a Gaussian).","category":"page"},{"location":"generated/statsplots/#corrplot-and-cornerplot","page":"StatsPlots","title":"corrplot and cornerplot","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"This plot type shows the correlation among input variables. The marker color in scatter plots reveal the degree of correlation. Pass the desired colorgradient to markercolor. With the default gradient positive correlations are blue, neutral are yellow and negative are red. In the 2d-histograms the color gradient show the frequency of points in that bin (as usual controlled by seriescolor).","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"gr(size = (600, 500))","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"then","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"@df iris corrplot([:SepalLength :SepalWidth :PetalLength :PetalWidth], grid = false)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"or also:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"@df iris corrplot(cols(1:4), grid = false)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: corrplot)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"A correlation plot may also be produced from a matrix:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"M = randn(1000,4)\nM[:,2] .+= 0.8sqrt.(abs.(M[:,1])) .- 0.5M[:,3] .+ 5\nM[:,3] .-= 0.7M[:,1].^2 .+ 2\ncorrplot(M, label = [\"x$i\" for i=1:4])","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: )","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"cornerplot(M)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: )","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"cornerplot(M, compact=true)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: )","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"","category":"page"},{"location":"generated/statsplots/#boxplot,-dotplot,-and-violin","page":"StatsPlots","title":"boxplot, dotplot, and violin","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using RDatasets\nsingers = dataset(\"lattice\", \"singer\")\n@df singers violin(string.(:VoicePart), :Height, linewidth=0)\n@df singers boxplot!(string.(:VoicePart), :Height, fillalpha=0.75, linewidth=2)\n@df singers dotplot!(string.(:VoicePart), :Height, marker=(:black, stroke(0)))","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: violin)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Asymmetric violin or dot plots can be created using the side keyword (:both - default,:right or :left), e.g.:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"singers_moscow = deepcopy(singers)\nsingers_moscow[:Height] = singers_moscow[:Height] .+ 5\n@df singers violin(string.(:VoicePart), :Height, side=:right, linewidth=0, label=\"Scala\")\n@df singers_moscow violin!(string.(:VoicePart), :Height, side=:left, linewidth=0, label=\"Moscow\")\n@df singers dotplot!(string.(:VoicePart), :Height, side=:right, marker=(:black,stroke(0)), label=\"\")\n@df singers_moscow dotplot!(string.(:VoicePart), :Height, side=:left, marker=(:black,stroke(0)), label=\"\")","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Dot plots can spread their dots over the full width of their column mode = :uniform, or restricted to the kernel density (i.e. width of violin plot) with mode = :density (default). Horizontal position is random, so dots are repositioned each time the plot is recreated. mode = :none keeps the dots along the center.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: violin2)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"","category":"page"},{"location":"generated/statsplots/#Equal-area-histograms","page":"StatsPlots","title":"Equal-area histograms","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"The ea-histogram is an alternative histogram implementation, where every 'box' in the histogram contains the same number of sample points and all boxes have the same area. Areas with a higher density of points thus get higher boxes. This type of histogram shows spikes well, but may oversmooth in the tails. The y axis is not intuitively interpretable.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"a = [randn(100); randn(100) .+ 3; randn(100) ./ 2 .+ 3]\nea_histogram(a, bins = :scott, fillalpha = 0.4)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: equal area histogram)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"","category":"page"},{"location":"generated/statsplots/#AndrewsPlot","page":"StatsPlots","title":"AndrewsPlot","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"AndrewsPlots are a way to visualize structure in high-dimensional data by depicting each row of an array or table as a line that varies with the values in columns. https://en.wikipedia.org/wiki/Andrews_plot","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using RDatasets\niris = dataset(\"datasets\", \"iris\")\n@df iris andrewsplot(:Species, cols(1:4), legend = :topleft)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: iris_andrews_curve)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"","category":"page"},{"location":"generated/statsplots/#ErrorLine","page":"StatsPlots","title":"ErrorLine","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"The ErrorLine function shows error distributions for lines plots in a variety of styles.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"x = 1:10\ny = fill(NaN, 10, 100, 3)\nfor i = axes(y,3)\n    y[:, :, i] = collect(1:2:20) .+ rand(10,100).*5 .* collect(1:2:20) .+ rand()*100\nend\n\nerrorline(x, y[:, :, 1], errorstyle=:ribbon, label=\"Ribbon\")\nerrorline!(x, y[:, :, 2], errorstyle=:stick, label=\"Stick\", secondarycolor=:matched)\nerrorline!(x, y[:, :, 3], errorstyle=:plume, label=\"Plume\")","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: ErrorLine Styles)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"","category":"page"},{"location":"generated/statsplots/#Distributions","page":"StatsPlots","title":"Distributions","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using Distributions\nplot(Normal(3,5), fill=(0, .5,:orange))","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: )","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"dist = Gamma(2)\nscatter(dist, leg=false)\nbar!(dist, func=cdf, alpha=0.3)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: )","category":"page"},{"location":"generated/statsplots/#Quantile-Quantile-plots","page":"StatsPlots","title":"Quantile-Quantile plots","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"The qqplot function compares the quantiles of two distributions, and accepts either a vector of sample values or a Distribution. The qqnorm is a shorthand for comparing a distribution to the normal distribution. If the distributions are similar the points will be on a straight line.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"x = rand(Normal(), 100)\ny = rand(Cauchy(), 100)\n\nplot(\n qqplot(x, y, qqline = :fit), # qqplot of two samples, show a fitted regression line\n qqplot(Cauchy, y),           # compare with a Cauchy distribution fitted to y; pass an instance (e.g. Normal(0,1)) to compare with a specific distribution\n qqnorm(x, qqline = :R)       # the :R default line passes through the 1st and 3rd quartiles of the distribution\n)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: skaermbillede 2017-09-28 kl 22 46 28)","category":"page"},{"location":"generated/statsplots/#Grouped-Bar-plots","page":"StatsPlots","title":"Grouped Bar plots","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"groupedbar(rand(10, 3), bar_position = :stack, bar_width = 0.7)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: tmp)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"This is the default:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"groupedbar(rand(10, 3), bar_position = :dodge, bar_width = 0.7)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: tmp)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"The group syntax is also possible in combination with groupedbar:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"ctg = repeat([\"Category 1\", \"Category 2\"], inner = 5)\nname = repeat(\"G\" .* string.(1:5), outer = 2)\n\ngroupedbar(name, rand(5, 2), group = ctg, xlabel = \"Groups\", ylabel = \"Scores\",\n           title = \"Scores by group and category\", bar_width = 0.67,\n           lw = 0, framestyle = :box)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: )","category":"page"},{"location":"generated/statsplots/#Grouped-Histograms","page":"StatsPlots","title":"Grouped Histograms","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using RDatasets\niris = dataset(\"datasets\", \"iris\")\n@df iris groupedhist(:SepalLength, group = :Species, bar_position = :dodge)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: dodge)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"@df iris groupedhist(:SepalLength, group = :Species, bar_position = :stack)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: stack)","category":"page"},{"location":"generated/statsplots/#Dendrograms","page":"StatsPlots","title":"Dendrograms","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using Clustering\nD = rand(10, 10)\nD += D'\nhc = hclust(D, linkage=:single)\nplot(hc)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: dendrogram)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"The branchorder=:optimal option in hclust() can be used to minimize the distance between neighboring leaves:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using Clustering\nusing Distances\nusing StatsPlots\nusing Random\n\nn = 40\n\nmat = zeros(Int, n, n)\n# create banded matrix\nfor i in 1:n\n    last = minimum([i+Int(floor(n/5)), n])\n    for j in i:last\n        mat[i,j] = 1\n    end\nend\n\n# randomize order\nmat = mat[:, randperm(n)]\ndm = pairwise(Euclidean(), mat, dims=2)\n\n# normal ordering\nhcl1 = hclust(dm, linkage=:average)\nplot(\n    plot(hcl1, xticks=false),\n    heatmap(mat[:, hcl1.order], colorbar=false, xticks=(1:n, [\"$i\" for i in hcl1.order])),\n    layout=grid(2,1, heights=[0.2,0.8])\n    )","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: heatmap dendrogram non-optimal)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Compare to:","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"# optimal ordering\nhcl2 = hclust(dm, linkage=:average, branchorder=:optimal)\nplot(\n    plot(hcl2, xticks=false),\n    heatmap(mat[:, hcl2.order], colorbar=false, xticks=(1:n, [\"$i\" for i in hcl2.order])),\n    layout=grid(2,1, heights=[0.2,0.8])\n    )","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: heatmap dendrogram optimal)","category":"page"},{"location":"generated/statsplots/#Dendrogram-on-the-right-side","page":"StatsPlots","title":"Dendrogram on the right side","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using Distances\nusing Clustering\nusing StatsBase\nusing StatsPlots\n\npd=rand(Float64,16,7)\n\ndist_col=pairwise(CorrDist(),pd,dims=2)\nhc_col=hclust(dist_col, branchorder=:optimal)\ndist_row=pairwise(CorrDist(),pd,dims=1)\nhc_row=hclust(dist_row, branchorder=:optimal)\n\npdz=similar(pd)\nfor row in hc_row.order\n\tpdz[row,hc_col.order]=zscore(pd[row,hc_col.order])\nend\nnrows=length(hc_row.order)\nrowlabels=(1:16)[hc_row.order]\nncols=length(hc_col.order)\ncollabels=(1:7)[hc_col.order]\nl = grid(2,2,heights=[0.2,0.8,0.2,0.8],widths=[0.8,0.2,0.8,0.2])\nplot(\n\tlayout = l,\n\tplot(hc_col,xticks=false),\n\tplot(ticks=nothing,border=:none),\n\tplot(\n\t\tpdz[hc_row.order,hc_col.order],\n\t\tst=:heatmap,\n\t\t#yticks=(1:nrows,rowlabels),\n\t\tyticks=(1:nrows,rowlabels),\n\t\txticks=(1:ncols,collabels),\n\t\txrotation=90,\n\t\tcolorbar=false\n\t),\n\tplot(hc_row,yticks=false,xrotation=90,orientation=:horizontal,xlim=(0,1))\n)\n","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: heatmap with dendrograms on top and on the right)","category":"page"},{"location":"generated/statsplots/#GroupedErrors.jl-for-population-analysis","page":"StatsPlots","title":"GroupedErrors.jl for population analysis","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Population analysis on a table-like data structures can be done using the highly recommended GroupedErrors package.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"This external package, in combination with StatsPlots, greatly simplifies the creation of two types of plots:","category":"page"},{"location":"generated/statsplots/#1.-Subject-by-subject-plot-(generally-a-scatter-plot)","page":"StatsPlots","title":"1. Subject by subject plot (generally a scatter plot)","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Some simple summary statistics are computed for each experimental subject (mean is default but any scalar valued function would do) and then plotted against some other summary statistics, potentially splitting by some categorical experimental variable.","category":"page"},{"location":"generated/statsplots/#2.-Population-plot-(generally-a-ribbon-plot-in-continuous-case,-or-bar-plot-in-discrete-case)","page":"StatsPlots","title":"2. Population plot (generally a ribbon plot in continuous case, or bar plot in discrete case)","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"Some statistical analysis is computed at the single subject level (for example the density/hazard/cumulative of some variable, or the expected value of a variable given another) and the analysis is summarized across subjects (taking for example mean and s.e.m), potentially splitting by some categorical experimental variable.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"For more information please refer to the README.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"A GUI based on QML and the GR Plots.jl backend to simplify the use of StatsPlots.jl and GroupedErrors.jl even further can be found here (usable but still in alpha stage).","category":"page"},{"location":"generated/statsplots/#Ordinations","page":"StatsPlots","title":"Ordinations","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"MDS from MultivariateStats.jl can be plotted as scatter plots.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"using MultivariateStats, RDatasets, StatsPlots\n\niris = dataset(\"datasets\", \"iris\")\nX = convert(Matrix, iris[:, 1:4])\nM = fit(MDS, X'; maxoutdim=2)\n\nplot(M, group=iris.Species)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: MDS plot)","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"PCA will be added once the API in MultivariateStats is changed. See https://github.com/JuliaStats/MultivariateStats.jl/issues/109 and https://github.com/JuliaStats/MultivariateStats.jl/issues/95.","category":"page"},{"location":"generated/statsplots/#Covariance-ellipses","page":"StatsPlots","title":"Covariance ellipses","text":"","category":"section"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"A 2×2 covariance matrix Σ can be plotted as an ellipse, which is a contour line of a Gaussian density function with variance Σ.","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"covellipse([0,2], [2 1; 1 4], n_std=2, aspect_ratio=1, label=\"cov1\")\ncovellipse!([1,0], [1 -0.5; -0.5 3], showaxes=true, label=\"cov2\")","category":"page"},{"location":"generated/statsplots/","page":"StatsPlots","title":"StatsPlots","text":"(Image: covariance ellipses)","category":"page"},{"location":"RecipesBase/#RecipesBase","page":"RecipesBase","title":"RecipesBase","text":"","category":"section"},{"location":"RecipesBase/","page":"RecipesBase","title":"RecipesBase","text":"Author: Thomas Breloff (@tbreloff)","category":"page"},{"location":"RecipesBase/","page":"RecipesBase","title":"RecipesBase","text":"RecipesBase is a lightweight Package without dependencies that allows to define custom visualizations with the @recipe macro.","category":"page"},{"location":"RecipesBase/","page":"RecipesBase","title":"RecipesBase","text":"Package developers and users can define recipes to tell Plots.jl how to plot custom types without depending on it. Furthermore, recipes can be used for complex visualizations and new series types. Plots, for example, uses recipes internally to define histograms or bar plots. StatsPlots.jl and GraphRecipes.jl extend Plots functionality for statistical plotting and visualization of graphs.","category":"page"},{"location":"RecipesBase/","page":"RecipesBase","title":"RecipesBase","text":"RecipesBase exports the @recipe macro which provides a nice syntax for defining plot recipes. Under the hood @recipe defines a new method for RecipesBase.apply_recipe which is called recursively in Plots at different stages of the argument processing pipeline. This way other packages can communicate with Plots, i.e. define custom plotting recipes, only depending on RecipesBase. Furthermore, the convenience macros @series, @userplot and @shorthands are exported by RecipesBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots; gr()\nPlotsBase.reset_defaults()","category":"page"},{"location":"#Plots-powerful-convenience-for-visualization-in-Julia","page":"Home","title":"Plots - powerful convenience for visualization in Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Author: Thomas Breloff (@tbreloff)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To get started, see the tutorial.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Almost everything in Plots is done by specifying plot attributes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Tap into the extensive visualization functionality enabled by the Plots ecosystem, and easily build your own complex graphics components with recipes.","category":"page"},{"location":"#Intro-to-Plots-in-Julia","page":"Home","title":"Intro to Plots in Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Data visualization has a complicated history.  Plotting software makes trade-offs between features and simplicity, speed and beauty, and a static and dynamic interface. Some packages make a display and never change it, while others make updates in real-time.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Plots is a visualization interface and toolset. It sits above other backends, like GR, PythonPlot, PGFPlotsX, or Plotly, connecting commands with implementation. If one backend does not support your desired features or make the right trade-offs, you can just switch to another backend with one command. No need to change your code. No need to learn a new syntax. Plots might be the last plotting package you ever learn.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The goals with the package are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Powerful.  Do more with less. Complex visualizations become easy.\nIntuitive.  Start generating plots without reading volumes of documentation. Commands should \"just work.\"\nConcise.  Less code means fewer mistakes and more efficient development and analysis.\nFlexible.  Produce your favorite plots from your favorite package, only quicker and simpler.\nConsistent.  Don't commit to one graphics package. Use the same code and access the strengths of all backends.\nLightweight.  Very few dependencies, since backends are loaded and initialized dynamically.\nSmart.  It's not quite AGI, but Plots should figure out what you want it to do... not just what you tell it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use the preprocessing pipeline in Plots to describe your visualization completely before it calls the backend code.  This preprocessing maintains modularity and allows for efficient separation of front end code, algorithms, and backend graphics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please add wishlist items, bugs, or any other comments/questions to the issues list, and join the conversation on zulip.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Nevertheless, extreme configurability is not a goal of Plots. If you require a rather specific plotting feature, feel free to request it. However, do understand that Plots has to implement the feature across all backends which might be challenging due some backends' limitations. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#simple-is-beautiful","page":"Home","title":"Simple is Beautiful","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Lorenz Attractor","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\n# define the Lorenz attractor\nBase.@kwdef mutable struct Lorenz\n    dt::Float64 = 0.02\n    σ::Float64 = 10\n    ρ::Float64 = 28\n    β::Float64 = 8/3\n    x::Float64 = 1\n    y::Float64 = 1\n    z::Float64 = 1\nend\n\nfunction step!(l::Lorenz)\n    dx = l.σ * (l.y - l.x)\n    dy = l.x * (l.ρ - l.z) - l.y\n    dz = l.x * l.y - l.β * l.z\n    l.x += l.dt * dx\n    l.y += l.dt * dy\n    l.z += l.dt * dz\nend\n\nattractor = Lorenz()\n\n\n# initialize a 3D plot with 1 empty series\nplt = plot3d(\n    1,\n    xlim = (-30, 30),\n    ylim = (-30, 30),\n    zlim = (0, 60),\n    title = \"Lorenz Attractor\",\n    legend = false,\n    marker = 2,\n)\n\n# build an animated gif by pushing new points to the plot, saving every 10th frame\n@gif for i=1:1500\n    step!(attractor)\n    push!(plt, attractor.x, attractor.y, attractor.z)\nend every 10","category":"page"},{"location":"","page":"Home","title":"Home","text":"Make some waves","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\ndefault(legend = false)\nx = y = range(-5, 5, length = 40)\nzs = zeros(0, 40)\nn = 100\n\n@gif for i in range(0, stop = 2π, length = n)\n    f(x, y) = sin(x + 10sin(i)) + cos(y)\n\n    # create a plot with 3 subplots and a custom layout\n    l = @layout [a{0.7w} b; c{0.2h}]\n    p = plot(x, y, f, st = [:surface, :contourf], layout = l)\n\n    # induce a slight oscillating camera angle sweep, in degrees (azimuth, altitude)\n    plot!(p[1], camera = (10 * (1 + cos(i)), 40))\n\n    # add a tracking line\n    fixed_x = zeros(40)\n    z = map(f, fixed_x, y)\n    plot!(p[1], fixed_x, y, z, line = (:black, 5, 0.2))\n    vline!(p[2], [0], line = (:black, 5))\n\n    # add to and show the tracked values over time\n    global zs = vcat(zs, z')\n    plot!(p[3], zs, alpha = 0.2, palette = cgrad(:blues).colors)\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Iris Dataset","category":"page"},{"location":"","page":"Home","title":"Home","text":"# load a dataset\nusing RDatasets\niris = dataset(\"datasets\", \"iris\");\n\n# load the StatsPlots recipes (for DataFrames) available via:\n# Pkg.add(\"StatsPlots\")\nusing StatsPlots\n\n# Scatter plot with some custom settings\n@df iris scatter(\n    :SepalLength,\n    :SepalWidth,\n    group = :Species,\n    title = \"My awesome plot\",\n    xlabel = \"Length\",\n    ylabel = \"Width\",\n    m = (0.5, [:cross :hex :star7], 12),\n    bg = RGB(0.2, 0.2, 0.2)\n)","category":"page"},{"location":"generated/plotthemes/#PlotThemes","page":"PlotThemes","title":"PlotThemes","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: Build Status)","category":"page"},{"location":"generated/plotthemes/#Primary-author:-Patrick-Kofod-Mogensen-(@pkofod)","page":"PlotThemes","title":"Primary author: Patrick Kofod Mogensen (@pkofod)","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"PlotThemes is a package to spice up the plots made with Plots.jl. To install:","category":"page"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"Pkg.add(\"PlotThemes\")","category":"page"},{"location":"generated/plotthemes/#Using-PlotThemes","page":"PlotThemes","title":"Using PlotThemes","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"Currently the following themes are available:","category":"page"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":":default\n:dark\n:ggplot2\n:juno\n:lime\n:orange\n:sand\n:solarized\n:solarized_light\n:wong\n:wong2\n:gruvbox_dark\n:gruvbox_light\n:bright\n:vibrant\n:mute\n:dao\n:dracula\n:rose_pine\n:rose_pine_dawn","category":"page"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"When using Plots, a theme can be set using the theme function:","category":"page"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"using Plots\ntheme(thm::Symbol; kwargs...)","category":"page"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"theme accepts any Plots attribute as keyword argument and sets its value as default for subsequent plots.","category":"page"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"Themes can be previewed using Plots.showtheme(thm::Symbol):","category":"page"},{"location":"generated/plotthemes/#:default","page":"PlotThemes","title":":default","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_default)","category":"page"},{"location":"generated/plotthemes/#:dark","page":"PlotThemes","title":":dark","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_dark)","category":"page"},{"location":"generated/plotthemes/#:ggplot2","page":"PlotThemes","title":":ggplot2","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_ggplot2)","category":"page"},{"location":"generated/plotthemes/#:juno","page":"PlotThemes","title":":juno","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_juno)","category":"page"},{"location":"generated/plotthemes/#:lime","page":"PlotThemes","title":":lime","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_lime)","category":"page"},{"location":"generated/plotthemes/#:orange","page":"PlotThemes","title":":orange","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_orange)","category":"page"},{"location":"generated/plotthemes/#:sand","page":"PlotThemes","title":":sand","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_sand)","category":"page"},{"location":"generated/plotthemes/#:solarized","page":"PlotThemes","title":":solarized","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_solarized)","category":"page"},{"location":"generated/plotthemes/#:solarized_light","page":"PlotThemes","title":":solarized_light","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_solarized_light)","category":"page"},{"location":"generated/plotthemes/#:wong","page":"PlotThemes","title":":wong","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_wong)","category":"page"},{"location":"generated/plotthemes/#:wong2","page":"PlotThemes","title":":wong2","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_wong2)","category":"page"},{"location":"generated/plotthemes/#:gruvbox_dark","page":"PlotThemes","title":":gruvbox_dark","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_gruvbox_dark)","category":"page"},{"location":"generated/plotthemes/#:gruvbox_light","page":"PlotThemes","title":":gruvbox_light","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_gruvbox_light)","category":"page"},{"location":"generated/plotthemes/#:bright","page":"PlotThemes","title":":bright","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_bright)","category":"page"},{"location":"generated/plotthemes/#:vibrant","page":"PlotThemes","title":":vibrant","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_vibrant)","category":"page"},{"location":"generated/plotthemes/#:mute","page":"PlotThemes","title":":mute","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_mute)","category":"page"},{"location":"generated/plotthemes/#:dao","page":"PlotThemes","title":":dao","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_dao)","category":"page"},{"location":"generated/plotthemes/#:dracula","page":"PlotThemes","title":":dracula","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_dracula)","category":"page"},{"location":"generated/plotthemes/#:rose_pine","page":"PlotThemes","title":":rose_pine","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_rose_pine)","category":"page"},{"location":"generated/plotthemes/#:rose_pine_dawn","page":"PlotThemes","title":":rose_pine_dawn","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"(Image: theme_rose_pine_dawn)","category":"page"},{"location":"generated/plotthemes/#Contributing","page":"PlotThemes","title":"Contributing","text":"","category":"section"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"A theme specifies default values for different Plots attributes. At the moment these are typically colors, palettes and colorgradients, but any Plots attribute can be controlled by a theme in general. PRs for new themes very welcome! Adding a new theme (e.g. mytheme) is as easy as adding a new file (mytheme.jl) that contains at least the following line:","category":"page"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"_themes[:mytheme] = PlotTheme(; kwargs...)","category":"page"},{"location":"generated/plotthemes/","page":"PlotThemes","title":"PlotThemes","text":"The keyword arguments can be any collection of Plots attributes plus a colorgradient keyword argument.","category":"page"}]
}
